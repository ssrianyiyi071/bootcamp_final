# -*- coding: utf-8 -*-
"""Qinyi Lin - Midterm Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10pLO6OqMWXRFRu7p_WH3rgRue1JuEJbz

For this midterm project, I chose to analyze the **Adult Dataset**, also known as the **Census Income Dataset**, which is widely used for **predicting whether an individual's income exceeds $50,000 per year based on census data**. The dataset contains *48,842 instances and 14 features*, including a mix of categorical and numerical variables. The goal of this analysis is to explore the dataset, uncover patterns, and answer meaningful questions about the factors that influence income levels.
"""

pip install ucimlrepo #install the ucimlrepo package

from ucimlrepo import fetch_ucirepo

# fetch dataset
census_income = fetch_ucirepo(id=20)

# data (as pandas dataframes)
X = census_income.data.features
y = census_income.data.targets

# metadata
print(census_income.metadata)

# variable information
print(census_income.variables) #code extracted from the oroginal dataset to import the dataset into my code

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns #import the necessary packages for data visualization

url = 'https://archive.ics.uci.edu/static/public/20/data.csv'
data = pd.read_csv(url)
data.head(10) #load dataset from the dataset url and read csv data into pandas dataframe

"""# **Dataset Overview**
The dataset includes the following variables:

* **Numerical Features:** age, fnlwgt, education-num, capital-gain, capital-loss,
hours-per-week

* **Categorical Features:** workclass, education, marital-status, occupation, relationship, race, sex, native-country, income (target variable)

The dataset has some missing values, which will need to be addressed during preprocessing.

**Key Questions:**


1. What are the key demographic factors (age, education, occupation, etc.) that influence income?
2.  How do categorical variables like workclass, marital-status, and race correlate with income?
3. Are there significant differences in income based on hours-per-week or capital-gain/loss?
4. Can we identify patterns or trends that distinguish individuals earning >50K from those earning <=50K?
"""

#since there are some missing values in the dataset, I'll replace ' ?' with NaN
data.replace(' ?', pd.NA, inplace=True)

#drop rows with missing values
data.dropna(inplace=True)

#verify no missing values remain
print(data.isnull().sum())

#drop less relevant columns (e.g., 'fnlwgt' is a sample weight)
data.drop('fnlwgt', axis=1, inplace=True)

#remove trailing periods and strip whitespace from all string columns in the DataFrame
for col in data.columns:
    if data[col].dtype == 'object':
        data[col] = data[col].str.strip().str.rstrip('.')

#verify cleaning
print(data.head())
print(data['income'].unique())  #should output ['<=50K', '>50K']

#convert income categories to numerical values (0/1)
data['income'] = data['income'].map({'<=50K': 0, '>50K': 1}).astype(int)

"""**1. Key Demographic Factors Influencing Income**

**Key Questions:**
1. Do men and women in higher income classes exhibit different age distributions?
2. Which occupations are most common for individuals with advanced degrees (e.g., Masters, PhD) earning >$50K?
3. Does the age distribution of high earners vary significantly across education levels (e.g., HS grads vs. PhDs)?
4. At what age do individuals with Bachelorâ€™s degrees typically transition into higher income brackets?

"""

#create split violin plot by gender
plt.figure(figsize=(12, 6))
sns.violinplot(data=data, x='income', y='age', hue='sex', split=True, inner='quartile')
plt.title('Age Distribution by Income and Gender', fontsize=14)
plt.xlabel('Income Class', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks([0, 1], ['<=50K', '>50K'])
plt.legend(title='Gender', loc='upper left')
plt.show()

print(data.groupby('income')['age'].describe()) #show statistical summary of age grouped by income

plt.savefig('Age Distribution by Income and Gender')

#create a cross-tabulation of education and occupation
cross_tab = pd.crosstab(data['education'], data['occupation'])

#plot heatmap
plt.figure(figsize=(14, 8))
sns.heatmap( #create education-occupation heatmap for high earners
    cross_tab,
    annot=True,
    fmt='d',  #display counts as integers
    cmap='YlGnBu',
    cbar_kws={'label': 'Count'}
)
plt.title('Education vs. Occupation for High Earners (>$50K)')
plt.xlabel('Occupation')
plt.ylabel('Education')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.show()

print(data.groupby('education')['occupation'].describe()) #show occupation statistics by education

plt.savefig('Occupation for High Earners')

#filter top 5 education levels
top_education = data['education'].value_counts().nlargest(5).index

#violin plot
plt.figure(figsize=(16, 8))
sns.violinplot(data=data[data['education'].isin(top_education)], x='education', y='age', hue='income')
#create violin plot for age distribution by education and income

plt.title('Age Distribution by Income and Education Level')
plt.xlabel('Education Level')
plt.ylabel('Age')
plt.legend(title='Income', labels=['<=$50K', '>$50K'])
plt.show()

print(data.groupby('income')['education'].describe())

# Bin age into properly aligned groups
data['age_group'] = pd.cut(
    data['age'],
    bins=[20, 30, 40, 50, 60, 100],
    labels=['20-29', '30-39', '40-49', '50-59', '60+']
)

# Create pivot table (using full dataset with 0/1 income classes)
pivot_table = data.pivot_table(
    index='education',
    columns='age_group',
    values='income',
    aggfunc='mean',
    fill_value=0
)

# Plot heatmap with improved formatting
plt.figure(figsize=(14, 8))
sns.heatmap(
    pivot_table,
    annot=True,
    fmt='.0%',
    cmap='YlGnBu',
    cbar_kws={'label': 'Proportion Earning >$50K'}
)
plt.title('Income Rates by Age Group and Education Level')
plt.xlabel('Age Group')
plt.ylabel('Education Level')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

plt.savefig('income rates by age group and education level')

"""**2. Education & Occupation Analysis**

**Key Questions:**
1. Are married individuals more likely to earn >$50K compared to never-married or divorced groups?
2. Which racial group has the highest proportion of high earners, and is the difference statistically significant?
3. Do government employees have a higher likelihood of earning >$50K than private-sector workers?
"""

#create a cross-tabulation
cross_tab = pd.crosstab(data['marital-status'], data['income'], normalize='index')*100

#plot
cross_tab.sort_values(1, ascending=False).plot(
    kind='bar',
    stacked=True,
    figsize=(12, 6)
)
plt.title('Income Distribution by Marital Status')
plt.xlabel('Marital Status')
plt.ylabel('Percentage')
plt.legend(['<=50K', '>50K'], title='Income')
plt.xticks(rotation=45)

print(data.groupby('income')['marital-status'].describe()) #show marital status statistics by income

plt.savefig('Income Distribution by Marital Status')

plt.figure(figsize=(10, 5))

#calculate mean income (as proportion) for each race group and sort descendingly
race_plot = data.groupby('race')['income'].mean().sort_values(ascending=False)

race_plot.plot(kind='bar')

plt.title('High Earners (>50K) by Race', fontsize=14)
plt.xlabel('Race', fontsize=12)
plt.ylabel('Percentage', fontsize=12)
plt.xticks(rotation=45)

#add percentage labels to each bar
ax = plt.gca()  #get current axis
for p in ax.patches:  #iterate through each bar in the plot
    ax.annotate(f'{p.get_height():.0%}',  #format height value as percentage
                (p.get_x() + p.get_width() / 2., p.get_height()))#position label


print(data.groupby('income')['race'].describe())

plt.savefig('High Earners by Race')

# Workclass vs. Income
plt.figure(figsize=(12, 6))
sns.barplot(
    x='workclass',
    y='income',
    data=data.groupby('workclass')['income'].mean().reset_index().sort_values('income'))

plt.title('Income by Workclass')
plt.xlabel('Workclass')
plt.ylabel('Proportion Earning >$50K')
plt.xticks(rotation=45)
plt.show()

print(data.groupby('income')['workclass'].describe()) #show income statistics by workclass

"""**3. Work Habits Analysis**

**Key Questions:**
1. Do high earners work longer hours on average, or are there outliers skewing the trend?
2. Are high earners with large capital gains concentrated in specific age or work-hour ranges?
3. Do individuals with high capital gains work fewer hours, suggesting passive income sources?
"""

# Boxplot: Hours-per-week vs. Income
plt.figure(figsize=(10, 8))
sns.boxplot(data=data, x='income', y='hours-per-week') #create boxplot for weekly work hours by income class
plt.title('Weekly Work Hours by Income Class')
plt.xlabel('Income Class')
plt.ylabel('Hours per Week')
plt.xticks([0, 1], ['<=$50K', '>$50K'])
plt.show()

print(data.groupby('income')['hours-per-week'].describe()) #show work hour statistics by income

plt.savefig('weekly work hours by income class')

#create 3D scatter plot
fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection='3d')

#define marker styles and colors for sex
markers = {'Male': 'o', 'Female': '^'}
colors = {'Male': 'blue', 'Female': 'red'}

#plot each sex with different markers and colors
for sex in ['Male', 'Female']:
    subset = data[data['sex'] == sex]
    ax.scatter(subset['age'], subset['hours-per-week'], subset['capital-gain'], marker=markers[sex],
        c=colors[sex], label=sex)

#labels and title
ax.set_xlabel('Age')
ax.set_ylabel('Hours per Week')
ax.set_zlabel('Capital Gain')
plt.title('3D Income Distribution: Age vs. Hours vs. Capital Gain (Colored by Sex)')
plt.legend(title='Sex')
plt.show()
##https://matplotlib.org/stable/gallery/mplot3d/scatter3d.html#sphx-glr-gallery-mplot3d-scatter3d-py

#create bubble plot with sampled data
plt.figure(figsize=(14, 8))
sns.scatterplot(data=data, x='hours-per-week', y='capital-gain', hue='income', size='age',
    sizes=(20, 200), alpha=0.7)

plt.title('Capital Gain vs. Work Hours (Income & Age)')
plt.xlabel('Hours per Week')
plt.ylabel('Capital Gain (Log Scale)')
plt.yscale('log') #log scale for capital gain
plt.legend(title='Income')
plt.show()

print(data.groupby('income')['hours-per-week'].describe()) #show income statistics by work hours

"""**4. Trends between individuals earning >50K from those earning <=50K**

**Key Questions:**
1. How does education and gender show a trend in earning >50k?
2. Are certain occupations dominated by specific education levels?
3. Are high earners more likely to have both high gains and losses (investment activity)?
4. How does the likelihood of earning >50K vary by race across age groups?
"""

# Group by education and gender
grouped = data.groupby(['education', 'sex'])['income'].mean().reset_index()

# Plot interaction
plt.figure(figsize=(20, 8))
sns.lineplot(data=grouped, x='education', y='income', hue='sex', marker='o')

plt.title('Income by Education Level and Gender')
plt.xlabel('Education Level')
plt.ylabel('Proportion Earning >$50K')
plt.legend(title='Gender')
plt.show()

print(data.groupby('income')['education'].describe())

plt.savefig('Income by Education Level and Gender')

#identify top 10 high-earning occupations
top_occupations = data[data['income'] == 1]['occupation'].value_counts().nlargest(10).index

# Barplot: Occupation vs. Income
plt.figure(figsize=(18, 6))
sns.countplot(data=data[data['occupation'].isin(top_occupations)], x='occupation', hue='income')
#create count plot for occupation vs income distribution

plt.title('Income Distribution by Top 10 High-Earning Occupations', fontsize=14)
plt.xlabel('Occupation')
plt.ylabel('Count')
plt.legend(title='Income', labels=['<=$50K', '>$50K'])
plt.show()

print(data.groupby('income')['occupation'].describe())

plt.savefig('Income Distribution by Top 10 High-Earning Occupations')

#bin the 'age' column into age groups (20-29, 30-39, etc.) for easier analysis
data['age_group'] = pd.cut(data['age'], bins=[20, 30, 40, 50, 60, 100], labels=['20-29', '30-39', '40-49', '50-59', '60+'])

#group the data by 'race' and 'age_group', then calculate the mean income for each group
race_age = data.groupby(['race', 'age_group'])['income'].mean().reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(data=race_age, x='age_group', y='income', hue='race', marker='o')
plt.title('Income Proportion by Race and Age Group')
plt.ylabel('Proportion >$50K')
plt.show()

print(data.groupby('income')['age_group'].describe()) #print statistics for the 'age_group' column, grouped by income

#create a scatter plot to visualize the relationship between capital gain and capital loss
plt.figure(figsize=(12, 8))
sns.scatterplot(
    data=data,
    x=data['capital-gain'],
    y=data['capital-loss'],
    hue='income',
    size='age',
    alpha=0.7,
    sizes=(20, 200)
)
plt.title('Capital Gain vs. Loss')
plt.xlabel('Capital Gain')
plt.ylabel('Capital Loss')
plt.show()


print(data.groupby('income')['capital-gain'].describe()) #print statistics for the 'capital-gain' column, grouped by income

"""**Final Question: what combination allows people to earn the most money at the earliest age?**"""

#filter the dataset to include only individuals earning >$50K
high_earners = data[data['income'] == 1]

#group the filtered data by age, education, occupation, and sex
#compute the mean work hours and count of high earners in each group
grouped = high_earners.groupby(['age', 'education', 'occupation', 'sex']).agg({
    'hours-per-week': 'mean',  #calculate average work hours per group
    'income': 'size'           #count the number of high earners in each group
}).reset_index().rename(columns={'income': 'count'})  #rename the count column for clarity

#sort the grouped data by age (ascending) and count of high earners (descending)
#this helps identify the youngest high earners in the most common occupations
sorted_data = grouped.sort_values(by=['age', 'count'], ascending=[True, False])

#select the top 10 combinations of age, education, occupation, and sex
top_combinations = sorted_data.head(10)

#print a formatted table of the top combinations
print("Top High-Earning Combinations for Young Professionals:")
print(top_combinations[['age', 'education', 'occupation', 'sex', 'hours-per-week']])

#create a bar plot to visualize the top combinations
plt.figure(figsize=(14, 8))  #set the figure size for better readability
sns.barplot(
    data=top_combinations,  #ue the top combinations data
    x='hours-per-week',     #plot average work hours on the x-axis
    y='occupation',         #plot occupations on the y-axis
    hue='age',              #color-code bars by age
    dodge=False             #ensure bars are not split by hue (age)
)

#graph the data
plt.title('High-Earning Combinations (Ages â‰¤35) Education + Occupation + Work Hours')
plt.xlabel('Average Weekly Work Hours')
plt.ylabel('Occupation')
plt.legend(title='Age', loc='right')
plt.grid(axis='x')

plt.savefig('top_high_earning_combinations.png')